# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-08-15 18:42
from __future__ import unicode_literals

from django.db import migrations


def clear_draft_registration_responses(state, schema):
    """
    Reverse migration
    """
    DraftRegistration = state.get_model('osf', 'draftregistration')
    DraftRegistration.objects.all().update(registration_responses={})

def clear_registration_responses(state, schema):
    """
    Reverse migration
    """
    Registration = state.get_model('osf', 'registration')
    Registration.objects.update(registration_responses={})

def get_nested_answer(nested_response, keys):
    """
    Recursively fetches the nested response in registered_meta.

    :params nested_response dictionary
    :params keys array, of nested question_ids: ["recommended-analysis", "specify", "question11c"]
    """
    if isinstance(nested_response, basestring):
        return nested_response
    else:
        key = keys.pop(0)
        return get_nested_answer(nested_response.get(key, {}).get('value', ''), keys)

def extract_registration_responses(schema, registered_meta):
    """
    Extracts questions/nested registration_responses - makes use of schema block `registration_response_key` to pull
    out the nested registered_meta
    """
    registration_responses = {}
    registration_response_keys = schema.schema_blocks.filter(
        registration_response_key__isnull=False
    ).values_list(
        'registration_response_key',
        flat=True
    )
    for registration_response_key in registration_response_keys:
        registration_responses[registration_response_key] = get_nested_answer(registered_meta, registration_response_key.split('.'))
    return registration_responses

def migrate_draft_registration_metadata(state, schema):
    """
    Extracts questions/nested registration_responses from `registration_metadata`
    to top-level key-value pairs in `registration_responses`
    """
    DraftRegistration = state.get_model('osf', 'draftregistration')

    for draft in DraftRegistration.objects.all():
        draft.registration_responses = extract_registration_responses(
            draft.registration_schema,
            draft.registration_metadata)
        draft.save()

def migrate_registration_registered_meta(state, schema):
    """
    Extracts questions/nested registration_responses from `registered_meta`
    to top-level key-value pairs in `registration_responses`
    """
    Registration = state.get_model('osf', 'registration')
    RegistrationSchema = state.get_model('osf', 'registrationschema')

    for reg in Registration.objects.all():
        schema_id = reg.registered_meta.keys()[0] if reg.registered_meta.keys() else None
        if schema_id:
            schema = RegistrationSchema.objects.get(_id=schema_id)
            reg.registration_responses = extract_registration_responses(schema, reg.registered_meta[schema_id])
            reg.save()


class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0182_add_answer_fields'),
    ]

    operations = [
        migrations.RunPython(migrate_draft_registration_metadata, clear_draft_registration_responses),
        migrations.RunPython(migrate_registration_registered_meta, clear_registration_responses),
    ]
