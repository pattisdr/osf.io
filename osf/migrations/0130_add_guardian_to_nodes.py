# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-08-27 21:07
from __future__ import unicode_literals
import logging

from django.db import migrations, connection
from django.core.management.sql import emit_post_migrate_signal

logger = logging.getLogger(__name__)

def reverse_func(apps, schema_editor):
    # TODO reverse migration to take contributors from groups and add them back to the contributor model
    pass

def migrate_nodes_to_django_guardian(state, schema):
    return
    logger.info('Starting to add django guardian to existing nodes [SQL]:')
    # this is to make sure that the permissions created earlier exist!
    emit_post_migrate_signal(2, False, 'default')

    with connection.cursor() as cursor:
        cursor.execute(
            """
            -- Creates Read, Write, and Admin groups for each existing node
            INSERT INTO auth_group (name)
            (SELECT 'node_' || N.id || '_read' FROM osf_abstractnode AS N
            UNION
            SELECT 'node_' || N.id || '_write' FROM osf_abstractnode AS N
            UNION
            SELECT 'node_' || N.id || '_admin' FROM osf_abstractnode AS N);

            -- Adds "read_node" permissions to all Node read groups
            INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)
            SELECT N.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id
            FROM osf_abstractnode AS N, auth_group G, django_content_type AS CT, auth_permission AS PERM
            WHERE G.name = 'node_' || N.id || '_read'
            AND CT.model = 'node' AND CT.app_label = 'osf'
            AND PERM.codename = 'read_node';

            -- Adds "read_node" and "write_node" permissions to all Node write groups
            INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)
            SELECT N.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id
            FROM osf_abstractnode AS N, auth_group G, django_content_type AS CT, auth_permission AS PERM
            WHERE G.name = 'node' || N.id || '_write'
            AND CT.model = 'node' AND CT.app_label = 'osf'
            AND PERM.codename = 'read_node';

            INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)
            SELECT N.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id
            FROM osf_abstractnode AS N, auth_group G, django_content_type AS CT, auth_permission AS PERM
            WHERE G.name = 'node' || N.id || '_write'
            AND CT.model = 'node' AND CT.app_label = 'osf'
            AND PERM.codename = 'write_node';

            -- Adds "read_node", "write_node", and "admin_node" permissions to all Node admin groups
            INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)
            SELECT N.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id
            FROM osf_abstractnode AS N, auth_group G, django_content_type AS CT, auth_permission AS PERM
            WHERE G.name = 'node_' || N.id || '_admin'
            AND CT.model = 'node' AND CT.app_label = 'osf'
            AND PERM.codename = 'read_node';

            INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)
            SELECT N.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id
            FROM osf_abstractnode AS N, auth_group G, django_content_type AS CT, auth_permission AS PERM
            WHERE G.name = 'node_' || N.id || '_admin'
            AND CT.model = 'node' AND CT.app_label = 'osf'
            AND PERM.codename = 'write_node';

            INSERT INTO guardian_groupobjectpermission (object_pk, group_id, content_type_id, permission_id)
            SELECT N.id as object_pk, G.id as group_id, CT.id AS content_type_id, PERM.id AS permission_id
            FROM osf_abstractnode AS N, auth_group G, django_content_type AS CT, auth_permission AS PERM
            WHERE G.name = 'node_' || N.id || '_admin'
            AND CT.model = 'node' AND CT.app_label = 'osf'
            AND PERM.codename = 'admin_node';

            -- Add users with read permissions only on the node to the node's read group
            INSERT INTO osf_osfuser_groups (osfuser_id, group_id)
            SELECT C.user_id as osfuser_id, G.id as group_id
            FROM osf_abstractnode as N, osf_contributor as C, auth_group as G
            WHERE C.node_id = N.id
            AND C.read = TRUE
            AND C.write = FALSE
            AND C.admin = FALSE
            AND G.name = 'node_' || N.id || '_read';

            -- Add users with write permissions on node to the node's write group
            INSERT INTO osf_osfuser_groups (osfuser_id, group_id)
            SELECT C.user_id as osfuser_id, G.id as group_id
            FROM osf_abstractnode as N, osf_contributor as C, auth_group as G
            WHERE C.node_id = N.id
            AND C.read = TRUE
            AND C.write = TRUE
            AND C.admin = FALSE
            AND G.name = 'node_' || N.id || '_write';

            -- Add users with admin permissions on the node to the node's admin group
            INSERT INTO osf_osfuser_groups (osfuser_id, group_id)
            SELECT C.user_id as osfuser_id, G.id as group_id
            FROM osf_abstractnode as N, osf_contributor as C, auth_group as G
            WHERE C.node_id = N.id
            AND C.read = TRUE
            AND C.write = TRUE
            AND C.admin = TRUE
            AND G.name = 'node_' || N.id || '_admin';
        """
        )

class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0129_auto_20180818_1710'),
    ]

    operations = [
        migrations.RunPython(migrate_nodes_to_django_guardian, reverse_func)
    ]
