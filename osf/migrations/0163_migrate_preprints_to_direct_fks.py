# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-03-25 02:05
from __future__ import unicode_literals
from math import ceil

import logging
from django.contrib.contenttypes.models import ContentType
from django.db import migrations, connection

logger = logging.getLogger(__name__)

increment = 100000

"""
PREPRINT MIGRATION (we were already using guardian for preprints, but weren't using direct foreign keys)
1) For each guardian GroupObjectPermission table entry that is related to a preprint, add entry to the
PreprintGroupObjectPermission table
"""

# DELETE FROM guardian_groupobjectpermission present in both forward and reverse migrations because forward migration had already been
# completed on staging environment and reverse migration needed to delete old rows before restoring out of the box guardian rows
def reverse_migrate_preprints(state, schema):
    sql = """
        DELETE FROM guardian_groupobjectpermission GO
        USING django_content_type CT
        WHERE CT.model = 'preprint' AND CT.app_label = 'osf'
        AND GO.content_type_id = CT.id;

        -- Reverse migration - Repopulating out of the box guardian table
        INSERT INTO guardian_groupobjectpermission (object_pk, content_type_id, group_id, permission_id)
        SELECT CAST(PG.content_object_id AS INT), CAST(CT.id AS INT), CAST(PG.group_id AS INT), CAST(PG.permission_id AS INT)
        FROM osf_preprintgroupobjectpermission PG, django_content_type CT
        WHERE CT.model = 'preprint' AND CT.app_label = 'osf';

        -- Reverse migration - dropping custom PreprintGroupObject permission table
        DELETE FROM osf_preprintgroupobjectpermission;
        """

    with connection.cursor() as cursor:
        cursor.execute(sql)

# Forward migration - moving preprints to dfks
def migrate_preprints_to_direct_fks(state, schema):
    GroupObjectPermission = state.get_model('guardian', 'groupobjectpermission')
    Preprint = state.get_model('osf', 'preprint')
    preprint_ct_id = ContentType.objects.get_for_model(Preprint).id
    max_pid = getattr(GroupObjectPermission.objects.filter(content_type_id=preprint_ct_id).last(), 'id', 0)

    total_pages = int(ceil(max_pid / float(increment)))
    page_start = 0
    page_end = 0
    page = 0

    logger.info('{}'.format('Migrating preprints to use direct foreign keys to speed up permission checks.'))
    while page_end <= (max_pid):
        page += 1
        page_end += increment
        if page <= total_pages:
            logger.info('Updating page {} / {}'.format(page_end / increment, total_pages))

        with connection.cursor() as cursor:
            cursor.execute("""
                INSERT INTO osf_preprintgroupobjectpermission (content_object_id, group_id, permission_id)
                SELECT CAST(GO.object_pk AS INT), CAST(GO.group_id AS INT), CAST(GO.permission_id AS INT)
                FROM guardian_groupobjectpermission GO, django_content_type CT
                WHERE CT.model = 'preprint' AND CT.app_label = 'osf'
                AND GO.content_type_id = CT.id
                AND CAST(GO.object_pk AS INT) > %s
                AND CAST(GO.object_pk AS INT) <= %s;

                DELETE FROM guardian_groupobjectpermission GO
                USING django_content_type CT
                WHERE CT.model = 'preprint' AND CT.app_label = 'osf'
                AND GO.content_type_id = CT.id
                AND CAST(GO.object_pk AS INT) > %s
                AND CAST(GO.object_pk AS INT) <= %s;
            """ % (page_start, page_end, page_start, page_end)
            )
        page_start = page_end
    logger.info('Finished preprint direct foreign key migration.')

class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0162_post_migrate'),
    ]

    operations = [
        migrations.RunPython(migrate_preprints_to_direct_fks, reverse_migrate_preprints)
    ]
