# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-09-26 20:08
from __future__ import unicode_literals

from django.db import migrations

FORMAT_TYPE_TO_TYPE_MAP = {
    ('multiselect', 'choose'): 'multi-select-input',
    (None, 'multiselect'): 'multi-select-input',
    (None, 'choose'): 'single-select-input',
    ('osf-upload-open', 'osf-upload'): 'file-input',
    ('osf-upload-toggle', 'osf-upload'): 'file-input',
    ('singleselect', 'choose'): 'single-select-input',
    ('text', 'string'): 'short-text-input',
    ('textarea', 'osf-author-import'): 'contributors-input',
    ('textarea', 'string'): 'long-text-input',
    ('textarea-lg', None): 'long-text-input',
    ('textarea-lg', 'string'): 'long-text-input',
    ('textarea-xl', 'string'): 'long-text-input',
}

def remove_version_1_schemas(state, schema):
    RegistrationSchema = state.get_model('osf', 'registrationschema')
    assert RegistrationSchema.objects.filter(schema_version=1, abstractnode__isnull=False).count() == 0
    assert RegistrationSchema.objects.filter(schema_version=1, draftregistration__isnull=False).count() == 0
    RegistrationSchema.objects.filter(schema_version=1).delete()

def update_schemaless_registrations(state, schema):
    RegistrationSchema = state.get_model('osf', 'registrationschema')
    AbstractNode = state.get_model('osf', 'abstractnode')

    open_ended_schema = RegistrationSchema.objects.get(name='Open-Ended Registration')
    open_ended_meta = {
        '{}'.format(open_ended_schema._id): {
            'summary': {
                'comments': [],
                'extra': [],
                'value': ''
            }
        }
    }

    schemaless_regs_with_meta = AbstractNode.objects.filter(type='osf.registration', registered_schema__isnull=True).exclude(registered_meta={})
    schemaless_regs_without_meta = AbstractNode.objects.filter(type='osf.registration', registered_schema__isnull=True, registered_meta={})

    for reg in schemaless_regs_without_meta.all():
        reg.registered_schema.add(open_ended_schema)
        reg.registered_meta = open_ended_meta
        reg.save()

    for reg in schemaless_regs_with_meta.all():
        reg.registered_schema.add(RegistrationSchema.objects.get(_id=reg.registered_meta.keys()[0]))

def update_schema_configs(state, schema):
    RegistrationSchema = state.get_model('osf', 'registrationschema')
    # TODO, factor in AsPredictedSchema, version 3
    for rs in RegistrationSchema.objects.filter(schema_version=2):
        if rs.schema.get('description', False):
            rs.description = rs.schema['description']
        rs.save()

def unset_schema_configs(state, schema):
    RegistrationSchema = state.get_model('osf', 'registrationschema')
    RegistrationSchema.objects.update(config=dict())

def unmap_formblocks(state, schema):
    RegistrationFormBlock = state.get_model('osf', 'registrationformblock')
    RegistrationFormBlock.objects.all().delete()

def noop(*args, **kwargs):
    pass

def create_block(state, schema_id, block_type, display_text='', required=False, help_text='',
        question_id=''):
    RegistrationFormBlock = state.get_model('osf', 'registrationformblock')

    return RegistrationFormBlock.objects.create(
        schema_id=schema_id,
        block_type=block_type,
        required=required,
        display_text=display_text,
        help_text=help_text,
        question_id=question_id,
    )

# Split question multiple choice options into blocks
def split_options_into_blocks(state, rs, question):
    for option in question.get('options', []):
        answer_text = option if isinstance(option, basestring) else option.get('text')
        help_text = '' if isinstance(option, basestring) else option.get('tooltip', '')

        if answer_text.lower() == 'other':
            create_block(
                state,
                rs.id,
                'select-other-option',
                display_text=answer_text,
                help_text=help_text,
                question_id=get_question_id(question)
            )
        else:
            create_block(
                state,
                rs.id,
                'select-input-option',
                display_text=answer_text,
                help_text=help_text,
                question_id=get_question_id(question)
            )

def get_question_id(question):
    return question.get('qid', '') or question.get('id', '')

def format_question(state, rs, question):
    # If there are subquestions, recurse and format subquestions
    if question.get('properties'):
        for index, property in enumerate(question.get('properties')):
            if not index:
                property['title'] = question.get('title', '')
                property['description'] = question.get('description', '')
            property['qid'] = '{}.{}'.format(get_question_id(question), property.get('id', ''))
            format_question(state, rs, property)
    else:
        # Map the original schema section format to the new block_type, and create a schema block
        block_type = FORMAT_TYPE_TO_TYPE_MAP[(question.get('format'), question.get('type'))]
        create_block(
            state,
            rs.id,
            block_type,
            display_text=question.get('title', ''),
            required=question.get('required', False),
            help_text=question.get('description', ''),
            question_id=get_question_id(question)
        )

        # If there are multiple choice answers, create blocks for these as well.
        split_options_into_blocks(state, rs, question)


def map_schema_to_formblocksv2(state, schema):
    RegistrationSchema = state.get_model('osf', 'registrationschema')
    # Returns the latest version of all visible schemas (?) inactive are still included.
    # How to handle EGAP schema?
    schemas = RegistrationSchema.objects.filter(visible=True).order_by('name', '-schema_version').distinct('name')
    for rs in schemas:
        for page in rs.schema['pages']:
            # Create page block
            create_block(
                state,
                rs.id,
                'page-heading',
                display_text=page.get('title', ''),
                help_text=page.get('description', '')
            )
            for question in page['questions']:
                format_question(state, rs, question)


class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0175_alter_form_blocks_v2'),
    ]

    operations = [
        migrations.RunPython(remove_version_1_schemas, noop),
        migrations.RunPython(update_schemaless_registrations, noop),
        migrations.RunPython(update_schema_configs, unset_schema_configs),
        migrations.RunPython(map_schema_to_formblocksv2, unmap_formblocks)
    ]
