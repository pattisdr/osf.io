# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-08-15 18:42
from __future__ import unicode_literals

from django.db import migrations


def clear_draft_registration_answers(state, schema):
    """
    Reverse migration
    """
    DraftRegistration = state.get_model('osf', 'draftregistration')
    DraftRegistration.objects.all().update(answers={})

def clear_registration_answers(state, schema):
    """
    Reverse migration
    """
    Registration = state.get_model('osf', 'registration')
    Registration.objects.update(answers={})

def get_nested_answer(nested_response, keys):
    """
    Recursively fetches the nested response in registered_meta.

    :params nested_response dictionary
    :params keys array, of nested question_ids: ["recommended-analysis", "specify", "question11c"]
    """
    if isinstance(nested_response, basestring):
        return nested_response
    else:
        key = keys.pop(0)
        return get_nested_answer(nested_response.get(key, {}).get('value', ''), keys)

def extract_answers(schema, registered_meta):
    """
    Extracts questions/nested answers - makes use of schema block `answer_ids` to pull
    out the nested registered_meta
    """
    answers = {}
    answer_keys = schema.schema_blocks.filter(answer_id__isnull=False).values_list('answer_id', flat=True)
    for answer_id in answer_keys:
        answers[answer_id] = get_nested_answer(registered_meta, answer_id.split('.'))
    return answers

def migrate_draft_registration_metadata(state, schema):
    """
    Extracts questions/nested answers from `registration_metadata`
    to top-level key-value pairs in `answers`
    """
    DraftRegistration = state.get_model('osf', 'draftregistration')

    for draft in DraftRegistration.objects.all():
        draft.answers = extract_answers(
            draft.registration_schema,
            draft.registration_metadata)
        draft.save()

def migrate_registration_registered_meta(state, schema):
    """
    Extracts questions/nested answers from `registered_meta`
    to top-level key-value pairs in `answers`
    """
    Registration = state.get_model('osf', 'registration')
    RegistrationSchema = state.get_model('osf', 'registrationschema')

    for reg in Registration.objects.all():
        schema_id = reg.registered_meta.keys()[0] if reg.registered_meta.keys() else None
        if schema_id:
            schema = RegistrationSchema.objects.get(_id=schema_id)
            reg.answers = extract_answers(schema, reg.registered_meta[schema_id])
            reg.save()


class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0177_add_answer_fields'),
    ]

    operations = [
        migrations.RunPython(migrate_draft_registration_metadata, clear_draft_registration_answers),
        migrations.RunPython(migrate_registration_registered_meta, clear_registration_answers),
    ]
