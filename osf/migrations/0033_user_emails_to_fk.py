# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-05-11 17:48
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
from django.db.models.deletion import CASCADE
from django_extensions.db.fields import CreationDateTimeField, ModificationDateTimeField
from osf.models.validators import validate_email
from osf.utils.fields import LowercaseEmailField


def create_emails(user, Email):
    uid = user['id']
    primary_email = user['username'].lower().strip()
    emails = set([e.lower().strip() for e in user['emails']])
    active = user['is_active']
    if active or not Email.objects.filter(address=primary_email).exists():
        _, created = Email.objects.get_or_create(address=primary_email, user_id=uid)
        assert created, 'Email object for username {} already exists'.format(primary_email)
    for email in emails:
        if email == primary_email:
            # Already created above
            continue
        if active or not Email.objects.filter(address=email).exists():
            _, created = Email.objects.get_or_create(address=email, user_id=uid)
            assert created, 'Email object for email {} on user {} already exists'.format(email, uid)


def populate_email_model(state, schema):
    # Note: it is expected that any duplicates have been merged before this is ran.
    # If not, this will error
    OSFUser = state.get_model('osf', 'osfuser')
    Email = state.get_model('osf', 'email')
    for user in OSFUser.objects.filter(is_active=True).values('id', 'username', 'emails', 'is_active'):
        # Give priority to active users
        create_emails(user, Email)
    for user in OSFUser.objects.filter(is_active=False, merged_by__isnull=True).values('id', 'username', 'emails', 'is_active'):
        create_emails(user, Email)


def restore_old_emails(state, schema):
    # Not possible with complete accuracy -- some disabled users may have lost info
    Email = state.get_model('osf', 'email')
    for email in Email.objects.all():
        if email.address not in email.user.emails:
            email.user.emails.append(email.address)
            email.user.save()

class Migration(migrations.Migration):

    dependencies = [
        ('osf', '0032_unquote_gd_nodesettings_folder_path'),
    ]

    operations = [
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('address', LowercaseEmailField(max_length=254, unique=True, db_index=True, validators=[validate_email])),
                ('user', models.ForeignKey(blank=False, null=False, on_delete=CASCADE, related_name='_emails', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            populate_email_model, restore_old_emails
        ),
        migrations.RemoveField(
            model_name='osfuser',
            name='emails'
        ),
    ]
