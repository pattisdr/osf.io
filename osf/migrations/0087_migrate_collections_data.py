# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-03-05 20:17
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ('osf', '0086_pre_migrate_collections'),
    ]

    operations = [
        migrations.RunSQL(
            [
                """
                -- Copy all existing collections into new table, keeping old pks
                INSERT INTO osf_collection (id, created, modified, content_type_pk, title, is_public, is_promoted,
                deleted, is_bookmark_collection, creator_id, provider_id, collected_type_choices, status_choices)
                    SELECT id, created, modified, CT.c_id, title, FALSE, FALSE,
                    CASE WHEN is_deleted IS TRUE
                      THEN
                        'epoch' :: TIMESTAMP WITH TIME ZONE
                      ELSE
                        NULL :: TIMESTAMP WITH TIME ZONE
                    END,
                    is_bookmark_collection,
                        creator_id, NULL, ARRAY[]::text[], ARRAY[]::text[]
                    FROM osf_abstractnode
                    LEFT JOIN LATERAL (
                        SELECT id AS c_id
                        FROM django_content_type
                        WHERE app_label = 'osf' AND model = 'collection'
                    ) CT ON TRUE
                    WHERE type = 'osf.collection';
                """, """
                -- Copy collected refs into thru-table
                INSERT INTO osf_collectedguidmetadata (id, created, modified, collected_type, status, creator_id, guid_id, collection_id, _order)
                    SELECT nextval('osf_collectedguidmetadata_id_seq'), created, modified, '', '', C.creator_id, G.id, C.id, _order
                    FROM osf_noderelation NR
                    LEFT JOIN LATERAL (
                        SELECT id, creator_id
                        FROM osf_collection
                        WHERE id = NR.parent_id
                    ) C on TRUE
                    LEFT JOIN LATERAL (
                        SELECT id
                        FROM osf_guid
                        WHERE content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' AND model = 'abstractnode')
                            AND object_id = NR.child_id
                    ) G ON TRUE
                    WHERE parent_id IN (SELECT id FROM osf_collection);
                """, """
                -- Populate thru-table for collection.collected_types. Until now, only nodes could be collected, so only populate with that type
                INSERT INTO osf_collection_collected_types (id, collection_id, contenttype_id)
                    SELECT nextval('osf_collection_collected_types_id_seq'), C.id, CT.id
                    FROM osf_collection C
                    LEFT JOIN LATERAL (
                        SELECT id
                        FROM django_content_type
                        WHERE app_label = 'osf'
                            AND model = 'abstractnode'
                    ) CT ON TRUE;
                -- Also populate with collection type. Until now, they were nodes, and several have already been collected
                INSERT INTO osf_collection_collected_types (id, collection_id, contenttype_id)
                    SELECT nextval('osf_collection_collected_types_id_seq'), C.id, CT.id
                    FROM osf_collection C
                    LEFT JOIN LATERAL (
                        SELECT id
                        FROM django_content_type
                        WHERE app_label = 'osf'
                            AND model = 'collection'
                    ) CT ON TRUE;
                """, """
                -- Point old collection GUIDs to new object
                UPDATE osf_guid
                    SET content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' AND model = 'collection')
                    WHERE id IN (
                        SELECT id
                        FROM osf_guid
                        WHERE content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' and model = 'abstractnode')
                            AND object_id IN (SELECT id FROM osf_collection)
                    );
                """, """
                -- Make a system tag for old collections
                INSERT INTO osf_tag (id, name, system, created, modified)
                    SELECT nextval('osf_tag_id_seq'), 'old_node_collection', TRUE, current_timestamp, current_timestamp;
                """, """
                -- And tag all old collections with it
                INSERT INTO osf_abstractnode_tags (id, abstractnode_id, tag_id)
                    SELECT nextval('osf_abstractnode_tags_id_seq'), N.id, ONT.id
                    FROM osf_abstractnode N
                    LEFT JOIN LATERAL (
                        SELECT id
                        FROM osf_tag
                        WHERE system = TRUE
                            AND name = 'old_node_collection'
                    ) ONT ON TRUE
                    WHERE N.type = 'osf.collection';
                """, """
                -- "Delete" old collection nodes
                UPDATE osf_abstractnode
                    SET type='osf.node',
                        is_deleted = TRUE,
                        deleted_date = current_timestamp
                    WHERE type='osf.collection';
               """, """
                -- Update the collection id seq to avoid conflicts when more are made
                SELECT setval('osf_collection_id_seq', max(id)) FROM osf_collection;
                """
            ], [
                """
                -- Undelete nodes
                UPDATE osf_abstractnode N
                    SET type = 'osf.collection',
                        is_deleted = FALSE,
                        deleted_date = NULL
                    FROM osf_abstractnode_tags ANT
                    LEFT JOIN LATERAL (
                        SELECT id
                        FROM osf_tag
                        WHERE system = TRUE
                            AND name = 'old_node_collection'
                    ) T ON TRUE
                    WHERE ANT.tag_id = T.id AND ANT.abstractnode_id = N.id
                """, """
                -- Repoint GUIDs
                UPDATE osf_guid
                    SET content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' AND model = 'abstractnode')
                    WHERE id IN (
                        SELECT id
                        FROM osf_guid
                        WHERE content_type_id = (SELECT id FROM django_content_type WHERE app_label = 'osf' and model = 'collection')
                            AND object_id IN (SELECT id FROM osf_collection)
                    );
                """, """
                -- Delete everything inserted in the forward
                DELETE FROM osf_collection;
                DELETE FROM osf_collection_collected_types;
                DELETE FROM osf_collectedguidmetadata;
                DELETE FROM osf_abstractnode_tags
                    WHERE tag_id = (SELECT id
                                    FROM osf_tag
                                    WHERE system = TRUE
                                        AND name = 'old_node_collection');
                DELETE FROM osf_tag
                    WHERE system = TRUE
                        AND name = 'old_node_collection';
                """, """
                -- Reset collection id sequence
                SELECT setval('osf_collection_id_seq', 1);
                """
            ]
        ),
    ]
